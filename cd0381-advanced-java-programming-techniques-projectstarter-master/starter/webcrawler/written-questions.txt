Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
    
    The parser took more time to run with the ParallelWebCrawler because when running, the profiler took the sum of the time 
    taken by the parse method in all the threads.



Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
        
        A sequential web crawler works better on an old computer because it doesn't take up a lot of resources from a one-thread computer
        as compared to a parallel web crawler


    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
        
        On a multicore computer because it has a higher number of threads, thus a parallel web crawler will outperform a sequential web crawler



Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
    
    The performance metric of the Profiler class is a cross-cutting concern being addressed by the class.


    (b) What are the join points of the Profiler in the web crawler program?
    
    The methods which contain the @Profiled annotation



Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
    
    Proxy Pattern which is applied in the ProfilerImpl class. I disliked it because it made the code complex to understand. Also, there was a higher
    chance of the proxy throwing an UndeclaredThrowableException which can be a learning curve to debug if a developer doesn't use the catch statement
    to catch the illegalAccessExemption
    
    Builder method which is applied to the CrawlerConfiduration, CrawlResult, and PageParser interface classes, I disliked it because using this 
    design pattern significantly increases the amount of code. Also, you will only know there is a problem with the code at runtime instead before compilation.
    
    Dependency injection is applied to the WebCrawlerMain and Profiler classes. One thing I disliked about it is how it increased the number of classes in the 
    project and also how it made the ode difficult to trace thus one has to refer to more files to follow what is going on. 



